// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// decor
void decor(arma::mat& seedMat);
RcppExport SEXP _SimJoint_decor(SEXP seedMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type seedMat(seedMatSEXP);
    decor(seedMat);
    return R_NilValue;
END_RCPP
}
// SJpearson
List SJpearson(arma::mat& X, arma::mat& cor, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_SJpearson(SEXP XSEXP, SEXP corSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SJpearson(X, cor, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SJpearsonPMF
List SJpearsonPMF(Rcpp::List PMFs, int sampleSize, arma::mat& cor, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_SJpearsonPMF(SEXP PMFsSEXP, SEXP sampleSizeSEXP, SEXP corSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PMFs(PMFsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SJpearsonPMF(PMFs, sampleSize, cor, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// xSJpearson
List xSJpearson(arma::mat& X, arma::mat& cor, arma::mat& noise, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_xSJpearson(SEXP XSEXP, SEXP corSEXP, SEXP noiseSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(xSJpearson(X, cor, noise, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// xSJpearsonPMF
List xSJpearsonPMF(Rcpp::List PMFs, int sampleSize, arma::mat& cor, arma::mat& noise, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_xSJpearsonPMF(SEXP PMFsSEXP, SEXP sampleSizeSEXP, SEXP corSEXP, SEXP noiseSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PMFs(PMFsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(xSJpearsonPMF(PMFs, sampleSize, cor, noise, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SJspearman
List SJspearman(arma::mat& X, arma::mat& cor, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_SJspearman(SEXP XSEXP, SEXP corSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SJspearman(X, cor, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// SJspearmanPMF
List SJspearmanPMF(Rcpp::List PMFs, int sampleSize, arma::mat& cor, NumericVector stochasticStepDomain, Rcpp::String errorType, IntegerVector seed, int maxCore, int convergenceTail, int iterLimit, bool verbose);
RcppExport SEXP _SimJoint_SJspearmanPMF(SEXP PMFsSEXP, SEXP sampleSizeSEXP, SEXP corSEXP, SEXP stochasticStepDomainSEXP, SEXP errorTypeSEXP, SEXP seedSEXP, SEXP maxCoreSEXP, SEXP convergenceTailSEXP, SEXP iterLimitSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type PMFs(PMFsSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type cor(corSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stochasticStepDomain(stochasticStepDomainSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type errorType(errorTypeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type maxCore(maxCoreSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    Rcpp::traits::input_parameter< int >::type iterLimit(iterLimitSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(SJspearmanPMF(PMFs, sampleSize, cor, stochasticStepDomain, errorType, seed, maxCore, convergenceTail, iterLimit, verbose));
    return rcpp_result_gen;
END_RCPP
}
// postSimOpt
List postSimOpt(NumericMatrix X, NumericMatrix cor, NumericMatrix Xcor, NumericVector acceptProb, IntegerVector seed, int convergenceTail);
RcppExport SEXP _SimJoint_postSimOpt(SEXP XSEXP, SEXP corSEXP, SEXP XcorSEXP, SEXP acceptProbSEXP, SEXP seedSEXP, SEXP convergenceTailSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type X(XSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type cor(corSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type Xcor(XcorSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type acceptProb(acceptProbSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< int >::type convergenceTail(convergenceTailSEXP);
    rcpp_result_gen = Rcpp::wrap(postSimOpt(X, cor, Xcor, acceptProb, seed, convergenceTail));
    return rcpp_result_gen;
END_RCPP
}
// LHSpmf
NumericVector LHSpmf(List pmf, int sampleSize, IntegerVector seed);
RcppExport SEXP _SimJoint_LHSpmf(SEXP pmfSEXP, SEXP sampleSizeSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type pmf(pmfSEXP);
    Rcpp::traits::input_parameter< int >::type sampleSize(sampleSizeSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(LHSpmf(pmf, sampleSize, seed));
    return rcpp_result_gen;
END_RCPP
}
// exportRandomState
IntegerVector exportRandomState(IntegerVector seed);
RcppExport SEXP _SimJoint_exportRandomState(SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< IntegerVector >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(exportRandomState(seed));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SimJoint_decor", (DL_FUNC) &_SimJoint_decor, 1},
    {"_SimJoint_SJpearson", (DL_FUNC) &_SimJoint_SJpearson, 9},
    {"_SimJoint_SJpearsonPMF", (DL_FUNC) &_SimJoint_SJpearsonPMF, 10},
    {"_SimJoint_xSJpearson", (DL_FUNC) &_SimJoint_xSJpearson, 10},
    {"_SimJoint_xSJpearsonPMF", (DL_FUNC) &_SimJoint_xSJpearsonPMF, 11},
    {"_SimJoint_SJspearman", (DL_FUNC) &_SimJoint_SJspearman, 9},
    {"_SimJoint_SJspearmanPMF", (DL_FUNC) &_SimJoint_SJspearmanPMF, 10},
    {"_SimJoint_postSimOpt", (DL_FUNC) &_SimJoint_postSimOpt, 6},
    {"_SimJoint_LHSpmf", (DL_FUNC) &_SimJoint_LHSpmf, 3},
    {"_SimJoint_exportRandomState", (DL_FUNC) &_SimJoint_exportRandomState, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_SimJoint(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
